package com.krisnovak.springboot.demo.planttracker.service;

import com.krisnovak.springboot.demo.planttracker.entity.*;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseCookie;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;


public interface PlantTrackerService {

    /**
     * Function that adds an Account to the database (using the email and passwordNew of the Account)
     * @param theAccount The account to be added to the database
     * @throws DataIntegrityViolationException Thrown if the account is a duplicate,
     * has empty or null email or passwordNew fields,
     * or has fields that are too long
     */
    public Account signUp(Account theAccount);

    /**
     * Function that changes the current password of an Account
     * in database if the email, passwordCurrent, and passwordNew are valid
     * @param theAccount The account whose password is to be changed
     * @throws InvalidAccountException Thrown if the account credentials (email and passwordCurrent) are invalid
     * @throws DataIntegrityViolationException Thrown if the account is a duplicate,
     * has a null passwordNew field or has a passwordNew field that is too long
     */
    public void changePassword(Account theAccount);

    /**
     * Function that deletes an Account from the database
     * @param theAccount The account to be deleted
     * @throws InvalidAccountException Thrown if the account credentials (email and passwordCurrent) are invalid
     */
    public Account deleteAccount(Account theAccount);

    /**
     * Function that validates if a cookie with the provided session ID exists and is not expired
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * It is linked to a session stored in the database
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     */
    public void validateCookie(String sessionID);

    /**
     * Function that creates a cookie for the provided account
     * @param theAccount The account for whom a cookie is being created
     * @return A response cookie that can be sent to a client
     * @throws InvalidAccountException Thrown if the provided account
     * has invalid credentials (invalid email/passwordCurrent)
     */
    public ResponseCookie createCookie(Account theAccount);

    /**
     * Function that attempts to remove the cookie with the provided session ID and provides and expired cookie
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * It is linked to a session stored in the database
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     */
    public ResponseCookie getExpiredCookie(String sessionID);

    /**
     * Function that looks for all plants linked to an account
     * associated with a particular cookie/session (using the provided sessionID)
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @return All plants linked to an account associated with the sessionID
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     */
    public List<Plant> findPlants(String sessionID);

    /**
     * Function that looks for a particular plant linked to an account
     * associated with a particular cookie/session (using the provided sessionID)
     * @param PlantID The ID of the plant to retrieve from the database
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @return The information about the particular requested plant
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     * @throws InvalidPlantException Thrown if the plant ID is invalid or if the plant ID is valid
     * but linked to a different Account
     */
    public Plant findPlantByPlantID(String PlantID, String sessionID);

    /**
     * Function that adds a plant to the database (registration ID and Plant ID are generated by this function)
     * @param thePlant The plant to be added to the database
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @return The plant that was added to the database with updated registration ID and plant ID
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     */
    public Plant addPlant(Plant thePlant, String sessionID);

    /**
     * Function that updates a plant within the database (only for plantName, lastWatered, and wateringInterval)
     * @param thePlant The plant to be added to the database
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @return The plant that was successfully updated
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     * @throws InvalidPlantException Thrown if the plant ID is invalid or if the plant ID is valid
     * but linked to a different Account
     */
    public Plant updatePlant(Plant thePlant, String sessionID) ;

    /**
     * Function that deletes a plant from the database
     * @param plantID ID of the plant to remove from the database
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @return The plant that was removed
     * @throws InvalidSessionException Thrown if the session does not exist in the database
     * @throws InvalidPlantException Thrown if the plant ID is invalid or if the plant ID is valid
     * but linked to a different Account
     */
    public Plant deletePlant(String plantID, String sessionID);

    /**
     * Function that validates that a connecting device has a valid account and a valid plant linked to that account
     * @param theDevice The connecting device and its relevant fields (account email and plant registration ID)
     * @throws InvalidPlantException Thrown if no plant can be found that is associated with the provided email
     * and registrationID
     */
    public void confirmDeviceRegistration(Device theDevice);

    /**
     * Function that updates a timestamp for the plant linked to the provided plant registration ID by the connecting device
     * @param theDevice The connecting device and its relevant fields (account email and plant registration ID)
     * @throws InvalidPlantException Thrown if no plant can be found that is associated with the provided email
     * and registrationID
     */
    public void updateTimestamp(Device theDevice);

    /**
     * Function to update the image linked to a particular plant
     * @param plantID ID of the plant to remove from the database
     * @param sessionID The text of the session ID field in the cookie that identifies the cookie
     * @param theFile The image file to be uploaded
     * @return The plant with an updated image URL to provide to the client
     * @throws IOException Thrown if the file is not an image file
     */
    public Plant updatePlantImage(String plantID, String sessionID, MultipartFile theFile) throws IOException;
}
